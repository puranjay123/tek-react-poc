import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';
import * as XLSX from 'xlsx';
import { distance } from 'levenshtein-edit-distance';

function App() {
  const [skills, setSkills] = useState('');
  const [experience, setExperience] = useState('');
  const [location, setLocation] = useState('');
  const [results, setResults] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  const sortAndHighlight = (data) => {
    // Sort data based on Rating and Experience
    data.sort((a, b) => {
      // Compare both rating and experience
      const ratingComparison = b[14] - a[14]; // Assuming rating is at index 0
      const experienceComparison = b[13] - a[13]; // Assuming years of experience is at index 1

      // Sort by the sum of rating and experience
      const sumComparison = (b[13] + b[14]) - (a[13] + a[14]);

      // Prioritize entries with a greater sum of rating and experience
      return (sumComparison > 0) ? sumComparison : ((ratingComparison !== 0) ? ratingComparison : experienceComparison);
    });

    const highlightedData = data.map((item, index) => ({
      ...item,
      highlight: index < 5,
    }));

    return highlightedData;
  };

  const handleSearch = (input) => {
    setSearchTerm(input);
    const filteredResults = results.filter((item) =>
      item[2].toLowerCase().includes(input.toLowerCase()) ||  // Assuming Resource Name is at index 2
      item[8].toLowerCase().includes(input.toLowerCase())     // Assuming Email is at index 8
    );
    setResults(filteredResults);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post('http://localhost:5000/search', {
        skills,
        experience,
        location,
      });

      // Check if the response contains a 'data' property and it's an array
      if (response.data && Array.isArray(response.data)) {
        const sortedResults = sortAndHighlight(response.data);
        setResults(sortedResults);
      } else {
        // Handle the case where the response does not contain an array
        console.error('Invalid response format:', response);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    // Fetch data when component mounts
    handleSubmit({ preventDefault: () => {} });
  }, []);

  return (
    <div className="app-container">
      <h1>Resource Planner for Employees</h1>
      <form onSubmit={handleSubmit}>
        <label htmlFor="skills">Skills:</label>
        <input
          type="text"
          name="skills"
          id="skills"
          value={skills}
          onChange={(e) => setSkills(e.target.value)}
        />

        <label htmlFor="experience">Experience:</label>
        <input
          type="text"
          name="experience"
          id="experience"
          value={experience}
          onChange={(e) => setExperience(e.target.value)}
        />

        <label htmlFor="location">Location:</label>
        <input
          type="text"
          name="location"
          id="location"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
        />

        <input
          type="text"
          placeholder="Search Resource Name or Email..."
          value={searchTerm}
          onChange={(e) => handleSearch(e.target.value)}
        />

        <button type="submit" style={{ marginRight: '1rem' }}>Search</button>
        <button type="button" onClick={handleBestFitClick} style={{ marginRight: '1rem' }}>Best Fit</button>
        <button type="button" onClick={handleDownloadExcel}>Download</button>
      </form>

      {results.length > 0 && (
        <div className='results-container'>
          <h2>Search Results:</h2>
          <div className="results-box">
            <table className="results-table">
              {/* ... (rest of the table structure remains the same) */}
            </table>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
